/*
 *  ofxRGBDRenderer.h
 *  ofxRGBDepthCaptureOpenNI
 *
 *  Created by Jim on 12/17/11.
 *  
 *  The ofxRGBDRenderer is capable of actually rendering a depth image aligned to a
 *  an RGB image from an external camera.
 *
 *  It requres a calibration file generated by a ofxRGBDAlignment from a series of checkerboard calibration pairs,
 *  a depth image and an rgb image from cameras from the same perspective
 *  
 *
 */

#pragma once
#include "ofMain.h"
#include "ofxCv.h"

typedef struct{
	int vertexIndex;
	bool valid;
} IndexMap;

using namespace ofxCv;
using namespace cv;

class ofxRGBDRenderer {
  public:
	ofxRGBDRenderer();
	~ofxRGBDRenderer();
	
	bool setup(string calibrationDirectory);

	void setRGBTexture(ofBaseHasTexture& rgbTexture); 
    void setDepthImage(ofShortPixels& pix);
//	void setDepthImage(unsigned short* depthPixelsRaw);

    ofBaseHasTexture& getRGBTexture();

	void update();

	//fudge factors to apply during alignment
	float xmult;
	float ymult;
	float edgeCull;
	float farClip;
	
	
    bool calculateTextureCoordinates;
    bool forceUndistortOff;
    bool addColors;
	bool mirror;
    bool calibrationSetup;
	
    bool bindRenderer(bool useShader = true);
    
    void setupProjectionUniforms(ofShader& shader);
    void restortProjection();
    
    void unbindRenderer();
    
	void reloadShader();
    
    ofVec3f meshRotate;
    
	//sets a level of simplification, 
	//should be either 1 for none
	//2 for half, or 4 for quarter;
	void setSimplification(int level);
	int getSimplification();
	
	void drawMesh(bool useShader = true);
	void drawPointCloud(bool useSahder = true);
	void drawWireFrame(bool useSahder = true);
	
	//populated with vertices, texture coords, and indeces
	ofMesh& getMesh();
	ofTexture& getTextureReference();
	
	Calibration& getRGBCalibration();
	Calibration& getDepthCalibration();
	

    bool isVertexValid(int index);
	int vertexIndex(int sequenceIndex);
    int getTotalPoints();
    
    //one shot texture coordinate generation if you need it for something
    //call this after a call to update()
    void generateTextureCoordinates();
  protected:	

	int simplify;

    bool shaderBound;
    bool rendererBound;
    bool hasVerts;
    
	Calibration depthCalibration, rgbCalibration;    
	Mat rotationDepthToRGB, translationDepthToRGB;

	bool hasDepthImage;
	bool hasRGBImage;

    bool calculateNormals;

	ofBaseHasTexture* currentRGBImage;
    ofShortPixels* currentDepthImage;
	//ofShortImage currentDepthImage;
	//ofShortImage undistortedDepthImage;
	
	vector<Point2f> imagePoints;    
	vector<Point2f> undistortedPoints;
	
	ofMesh simpleMesh;
    //ofVboMesh simpleMesh; 
    vector<ofIndexType> baseIndeces;
    vector<ofVec2f> texcoords;
    vector<ofVec3f> vertices;
	vector<IndexMap> indexMap;

	ofMatrix4x4 depthToRGBView;
	ofMatrix4x4 rgbProjection;
    ofMatrix4x4 rgbMatrix;

	ofShader shader;
    ofVec3f center;
    
};